<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:pu="https://opensource.panuon.com/wpf-ui">





    <!--通讯设置的参数-->
    <sys:Double x:Key="ButtonSize">40</sys:Double>
    <sys:Double x:Key="ShowTextSize">25</sys:Double> 

    <Style x:Key="BtnInfoStyle" TargetType="Button">

        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#43a9c7"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2f96b4"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2a89a4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BtnGreenNormalStyle" TargetType="Button">

        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="LightGreen"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2f96b4"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2a89a4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BtnWarningStyle" TargetType="Button">

        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#ff0020"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value ="#FFA51628"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#ff8000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type ComboBox}" x:Key="cmbstyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!--ComBoxItem-->
                <Style TargetType="ComboBoxItem">
                    <Setter Property="MinHeight" Value="30"></Setter>
                    <Setter Property="MinWidth" Value="200"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border Name="Back" Background="Transparent"  BorderThickness="0,0,0,0" BorderBrush="#81D779" >
                                    <ContentPresenter  VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0"></ContentPresenter>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
                                    </Trigger>
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border BorderThickness="0" CornerRadius="3"   Background="{TemplateBinding Background}" >
                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" x:Name="grid">
                                <ToggleButton
                                        Width="{Binding ElementName=grid,Path=ActualWidth}"
                                        Height="{Binding ElementName=grid, Path=ActualHeight}"
                                        Content="{TemplateBinding Text}" VerticalAlignment="Center"
                                        HorizontalAlignment="Left" Margin="5,0,0,0"
                                        BorderThickness="0"
                                        Foreground="{TemplateBinding Foreground}"
                                        Background="{TemplateBinding Background}"
                                        IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"
                                        >
                                    <ToggleButton.Style >
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="Background" Value="White"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border   Background="{TemplateBinding Background}" BorderThickness="0"  >
                                                            <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="4 0 0 0"  HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="White"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter Property="Background" Value="White"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>

                            <Grid Grid.Column="1" >
                                <ToggleButton IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  
                                                  ClickMode="Press">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="Background" Value="White"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                                                            <Grid>
                                                                <TextBlock Foreground="{TemplateBinding Foreground}" x:Name="arrow_tb" Text="^"  HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                                                    <TextBlock.RenderTransform>
                                                                        <TransformGroup>
                                                                            <ScaleTransform/>
                                                                            <SkewTransform/>
                                                                            <RotateTransform/>
                                                                            <TranslateTransform/>
                                                                        </TransformGroup>
                                                                    </TextBlock.RenderTransform>
                                                                </TextBlock>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">

                                                            </Trigger>
                                                            <EventTrigger RoutedEvent="Checked">
                                                                <BeginStoryboard>
                                                                    <Storyboard >
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="180"/>
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>

                                                            <EventTrigger RoutedEvent="Unchecked">
                                                                <BeginStoryboard>
                                                                    <Storyboard >
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="180"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                                <Border CornerRadius="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border.Effect>
                                        <DropShadowEffect Color="Black" BlurRadius="2" ShadowDepth="0" Opacity="0.5"/>
                                    </Border.Effect>
                                    <ScrollViewer Margin="4,6,4,6"  MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                        <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>


                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="-1" Opacity="0.3" Color="#FF969696" BlurRadius="5"/>
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>



    <Style x:Key="StandardDataGridStyle"
               TargetType="DataGrid"
              BasedOn="{StaticResource {x:Type DataGrid}}"
           >

       
        
        <Setter Property="CanUserReorderColumns"
                Value="False"></Setter>
        <Setter Property="CanUserSortColumns" 
                Value="False"/>
        
        <Setter Property="FontSize"
                Value="20"></Setter>
        <Setter Property="Background"
                    Value="LightBlue" />
        <Setter Property="Foreground"
                    Value="#F1F1F1" />
        <Setter Property="HorizontalGridLinesBrush"
                    Value="#8E8E8E" />
        <Setter Property="BorderThickness"
                    Value="0" />
        <Setter Property="GridLinesVisibility"
                    Value="Horizontal" />
        <Setter Property="pu:ScrollViewerHelper.ScrollBarPosition"
                    Value="Inside" />
        <Setter Property="pu:DataGridHelper.ColumnHeaderBackground"
                    Value="LightBlue" />
        <Setter Property="pu:DataGridHelper.ColumnHeaderForeground"
                    Value="Black" />
        <Setter Property="pu:DataGridHelper.ColumnHeaderFontSize"
                    Value="25" />
        <Setter Property="pu:DataGridHelper.RowHeaderBackground"
                    Value="Transparent" />
        <Setter Property="pu:DataGridHelper.ColumnHeaderHoverBackground"
                    Value="#22FFFFFF" />
        <Setter Property="pu:DataGridHelper.ColumnHeaderClickBackground"
                    Value="#44FFFFFF" />
        <Setter Property="pu:DataGridHelper.RowHoverBackground"
                    Value="#5F5F60" />
        <Setter Property="pu:DataGridHelper.RowSelectedBackground"
                    Value="#5F5F60" />

        
        
        <Setter Property="pu:DataGridHelper.CellSelectedBackground"
                Value="Black"/>
        
        
        <Setter Property="pu:DataGridHelper.ColumnHeaderSeparatorVisibility"
                    Value="Collapsed" />
        <Setter Property="pu:DataGridHelper.RowHeaderSeparatorVisibility"
                    Value="Collapsed" />
        <Setter Property="pu:DataGridHelper.RowHeaderHoverBackground"
                    Value="#424243" />
        <Setter Property="pu:DataGridHelper.RowHeaderClickBackground"
                    Value="#5F5F60" />
        <Setter Property ="HorizontalScrollBarVisibility"
                Value="Auto"/>

        <Setter Property ="VerticalScrollBarVisibility"
                Value="Auto"/>

        



    </Style>

    <Style x:Key="StandardScrollViewStyle"
               TargetType="ScrollViewer"
              BasedOn="{StaticResource {x:Type ScrollViewer}}">

        <Setter Property="Background" 
                Value="Transparent"/>

        <Setter Property="VerticalScrollBarVisibility" 
                
                Value="Disabled"/>
        <Setter Property="HorizontalScrollBarVisibility" 
                
                Value="Auto"/>
    </Style>



    <Style x:Key="StandardDataGridCellStyle" TargetType="DataGridCell">
        
        

        <Setter Property="ToolTip"  Value="{Binding RelativeSource={RelativeSource Mode=Self },Path=Content.Text}"/>
        
        
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>


</ResourceDictionary>
    